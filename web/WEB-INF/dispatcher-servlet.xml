<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
    http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
    http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
    
    <!-- 启动注解驱动的Spring MVC功能，注册请求url和注解POJO类方法的映射-->
    <mvc:annotation-driven />
    <mvc:default-servlet-handler/>
    <!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 上传的最大限制bytes(500kb) -->
        <property name="maxUploadSize" value="512000" />
        <!-- 默认编码 -->
        <property name="defaultEncoding" value="UTF-8" />
        <!-- 上传文件的解析 -->
        <property name="resolveLazily" value="true" />
    </bean>
    <!-- ModelAndView -->
    <bean id="jspViewResolver"
          class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/" />
        <property name="suffix" value=".jsp" />
    </bean>
    <!-- 启动包扫描功能，以便注册带有@Controller、@Service、@repository、@Component等注解的类成为spring的bean -->
    <context:component-scan base-package="cn.desayele.care" />
    <!-- 使用aop植入true表示使用cglib动态代理 -->
    <aop:aspectj-autoproxy proxy-target-class="true" />
	<!-- 引入json支持 -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="defaultContentType" value="text/html"></property>
        <property name="mediaTypes">
            <map>  
                <entry key="json" value="application/json" />
                <entry key="xml" value="application/xml" />  
                <entry key="html" value="text/html" />  
            </map>  
        </property>
        <property name="defaultViews">  
            <list>  
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView" />  
            </list>  
        </property>  
    </bean>
    <context:property-placeholder location="classpath*:jdbc.properties"/>
    <!-- 配置链接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${driverClass}"/>
		<property name="jdbcUrl" value="${jdbcUrl}"/>
		<property name="user" value="${user}"/>
		<property name="password" value="${password}"/>
        <!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3  -->
        <property name="initialPoolSize" value="50"/>
        <!-- 连接池中保留的最小连接数。 -->
        <property name="minPoolSize" value="50"/>
        <!-- 连接池中保留的最大连接数。Default: 15  -->
        <property name="maxPoolSize" value="2000"/>
        <!-- 最大空闲时间,1800秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0  -->
        <property name="maxIdleTime" value="1800"/>
        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3  -->
        <property name="acquireIncrement" value="50"/>
        <!-- 每60秒检查所有连接池中的空闲连接。Default: 0  -->
        <property name="idleConnectionTestPeriod" value="60"/>
	</bean>
	<!-- 配置SessionFactory,分配置文件和注解方式扫描实体类 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
		<property name="packagesToScan">
			<list>
				<value>cn.desayele.care.entity*</value>
			</list>
		</property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">false</prop>
                <prop key="hibernate.connection.release_mode">after_transaction</prop>
            </props>
        </property>
    </bean>
    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
	   <property name="sessionFactory">
	       <ref bean="sessionFactory"/>
	   </property>
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	<!-- dao -->
	<bean id="baseDAO" class="cn.desayele.care.dao.BaseDAO">
		<property name="sessionFactory">
	       <ref bean="sessionFactory"/>
	   </property>
	</bean>
</beans> 